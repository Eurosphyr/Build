// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  name          String
  email         String      @unique
  passwordHash  String
  role          Boolean     @default(false)
  
  posts         Post[]      @relation("LikeRelation", references: [id])
  universities  Univeristy[] @relation("FollowRelation", references: [id])
  following   User[]   @relation("FollowRelation", references: [id])

  @@map("users")
}

model Post {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  title         String
  content       String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  likes         Like[]
  saves         PostSave[]

  @@map("posts")
}

model PostSave {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
  user          User        @relation(fields: [userId], references: [id])
  userId        String

  @@map("post_saves")
}


model Follow {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  follower      User        @relation("FollowRelation", fields: [followerId], references: [id])
  followerId    String
  following     User        @relation("FollowRelation", fields: [followingId], references: [id])
  followingId   String

  @@map("follows")
}

model Univeristy {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  name          String
  location      String
  url           String
  description   String

  @@map("universities")
}



